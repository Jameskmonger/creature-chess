FROM node:12-alpine AS node

FROM node AS builder

WORKDIR /usr/src/cc-server

# root dependencies

COPY package.json package-lock.json ./
RUN npm ci --loglevel notice

# package dependencies

COPY packages/server-game/package*.json ./packages/server-game/
COPY packages/auth-server/package*.json ./packages/auth-server/
COPY packages/board/package*.json ./packages/board/
COPY packages/battle/package*.json ./packages/battle/
COPY packages/models/package*.json ./packages/models/
COPY packages/data/package*.json ./packages/data/
COPY packages/gamemode/package*.json ./packages/gamemode/
COPY packages/networking/package*.json ./packages/networking/

COPY lerna.json ./
RUN npm run bootstrap

FROM builder as built

COPY tsconfig.json .

# build dependencies - doing this manually improves docker caching
COPY packages/board ./packages/board
RUN npm run build -- --scope @creature-chess/board
COPY packages/models ./packages/models
RUN npm run build -- --scope @creature-chess/models
COPY packages/data ./packages/data
RUN npm run build -- --scope @creature-chess/data
COPY packages/battle ./packages/battle
RUN npm run build -- --scope @creature-chess/battle
COPY packages/gamemode ./packages/gamemode
RUN npm run build -- --scope @creature-chess/gamemode
COPY packages/networking ./packages/networking
RUN npm run build -- --scope @creature-chess/networking
COPY packages/auth-server ./packages/auth-server
RUN npm run build -- --scope @creature-chess/auth-server

# build main package
COPY packages/server-game ./packages/server-game
RUN npm run build -- --scope @creature-chess/server-game

FROM built as binary

# run script to create binary
COPY scripts/ ./scripts/
RUN npm run build:create-bin

FROM node

WORKDIR /usr/src/cc-server-bin

# copy binary only
COPY --from=binary /usr/src/cc-server/bin/ ./

EXPOSE 3000

CMD [ "node", "server-game/lib/index.js", "3000" ]
