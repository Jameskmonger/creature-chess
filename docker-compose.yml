version: "3.8"

volumes:
  pgdata:
  pgadmin:

services:
  # this is the base image for all nodejs-based apps
  nodejs-builder:
    build:
      context: .
      dockerfile: apps/nodejs-builder.Dockerfile
    image: nodejs-builder
  # this image builds the web-game app
  # TODO (James) we could extend this in local dev to also watch for changes
  web-game-builder:
    build:
      context: .
      dockerfile: apps/web-builder.Dockerfile
      args:
        - APP_DIR=web-game
    environment:
      - NODE_ENV
      - AUTH0_DOMAIN
      - AUTH0_SPA_CLIENT_ID
      - API_INFO_URL
      - CREATURE_CHESS_APP_URL
      - CREATURE_CHESS_IMAGE_URL
    volumes:
      # TODO (James) consider whether we should use an actual volume here
      #         rather than a bind mount
      - ./dist/web-game:/code/apps/web-game/dist
    depends_on:
      - nodejs-builder
  # this image builds the web-menu app
  # TODO (James) we could extend this in local dev to also watch for changes
  web-menu-builder:
    build:
      context: .
      dockerfile: apps/web-builder.Dockerfile
      args:
        - APP_DIR=web-menu
    environment:
      - NODE_ENV
      - AUTH0_DOMAIN
      - AUTH0_SPA_CLIENT_ID
      - API_INFO_URL
      - CREATURE_CHESS_APP_URL
      - CREATURE_CHESS_IMAGE_URL
      - GAME_SERVER_URL
    volumes:
      # TODO (James) consider whether we should use an actual volume here
      #         rather than a bind mount
      - ./dist/web-menu:/code/apps/web-menu/dist
    depends_on:
      - nodejs-builder
  # nginx is used to serve the web apps as well as proxy requests to the servers
  # the web app contents are passed in the volumes
  nginx:
    build:
      context: .
      dockerfile: nginx/local-dev/Dockerfile
    volumes:
      - ./nginx/local-dev/nginx/error.log:/etc/nginx/error_log.log
      - ./nginx/local-dev/nginx/access.log:/etc/nginx/access_log.log
      - ./images:/usr/share/nginx/html/images # images e.g. ui and creatures
      - ./dist/web-game:/usr/share/nginx/html/web-game # web-game app
      - ./dist/web-menu:/usr/share/nginx/html/web-menu # web-menu app
    ports:
      - 80:80
      - 443:443
    depends_on:
      web-game-builder:
        condition: service_started
      web-menu-builder:
        condition: service_started
      server-game:
        condition: service_started
      server-info:
        condition: service_started
  # this is the nodejs websocket server for the game
  server-game:
    environment:
      - DISCORD_BOT_TOKEN
      - AUTH0_DOMAIN
      - AUTH0_SPA_CLIENT_ID
      - AUTH0_MACHINE_TO_MACHINE_CLIENT_ID
      - AUTH0_MANAGEMENT_CLIENT_SECRET
      - CREATURE_CHESS_APP_URL
      - API_INFO_URL
      - CREATURE_CHESS_IMAGE_URL
      - NODE_ENV
      - DATABASE_URL
    build:
      context: .
      dockerfile: apps/Dockerfile
      args:
        - APP_DIR=server-game
    ports:
      - "3000"
    restart: always
    depends_on:
      nodejs-builder:
        condition: service_started
  # this is the API server
  server-info:
    environment:
      - AUTH0_DOMAIN
      - AUTH0_SPA_CLIENT_ID
      - AUTH0_MACHINE_TO_MACHINE_CLIENT_ID
      - AUTH0_MANAGEMENT_CLIENT_SECRET
      - CREATURE_CHESS_APP_URL
      - NODE_ENV
      - DATABASE_URL
    build:
      context: .
      dockerfile: apps/Dockerfile
      args:
        - APP_DIR=server-info
    ports:
      - "3000"
    restart: always
    depends_on:
      nodejs-builder:
        condition: service_started
